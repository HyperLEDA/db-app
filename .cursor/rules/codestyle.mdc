---
alwaysApply: true
---

# Python Code Style Guidelines

## Type Hints

Use type hints in function and class signatures as much as possible to improve code clarity and IDE support.

### When to Use Type Hints

- Function parameters and return types
- Class attributes and methods
- Generic types and collections
- Union types and optional parameters

### When NOT to Use Type Hints

- Simple variable declarations inside function bodies
- Local variables with obvious types
- When the type is already clear from context

### Avoiding `Any`

Avoid using `Any` in type hints unless it creates a typing that will not be used in any useful way by a programmer or an IDE. Prefer more specific types or generic types when possible.

## Code Comments

### When to Add Comments

Only add comments to code where non-obvious decisions were made. If the code is straightforward and self-explanatory, do not comment it.

Examples of when to comment:

- Complex business logic or algorithms
- Workarounds for external library limitations
- Performance optimizations that may seem counterintuitive
- Non-standard approaches to common problems

Examples of when NOT to comment:

- Simple variable assignments
- Obvious function calls
- Standard library usage
- Clear conditional statements

## Docstrings

Unless explicitly instructed otherwise, do not write docstrings for functions, classes, or modules. The code should be self-documenting through clear naming and structure.

## Import Guidelines

### Module Exports

When adding a new exportable function, class, or other symbol, add it to `__all__` inside the `__init__.py` of the corresponding directory. A symbol is deemed exportable only if it is used in other business logic of the project. If it is only used inside the same directory or in tests from the `tests/` directory, it should not be exported through `__all__`.

### Import Style

Prefer importing modules rather than individual symbols from modules. This improves code readability and makes dependencies clearer.

**Preferred:**

```python
import numpy as np
import pandas as pd

# Usage
data: np.ndarray = np.array([1, 2, 3])
df: pd.DataFrame = pd.DataFrame(data)
```

**Avoid:**

```python
from numpy import ndarray, array
from pandas import DataFrame

# Usage
data: ndarray = array([1, 2, 3])
df: DataFrame = DataFrame(data)
```

### Exception for Typing Imports

The only exception to the above rule is for imports from the `typing` or `collections.abc` package. These should be imported directly:

```python
from typing import Any
from collections.abc import Sequence
```
