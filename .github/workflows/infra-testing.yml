name: Infra testing

on:
  - push

jobs:
  test-deployment:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Install project dependencies
        run: uv sync --all-extras --dev

      - name: Generate SSH key pair
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keygen -m PEM -t rsa -b 2048 -f ~/.ssh/test_key -N "" -C "test@github-actions"
          chmod 600 ~/.ssh/test_key
          chmod 644 ~/.ssh/test_key.pub

          ssh-keyscan -H localhost >> ~/.ssh/known_hosts
          cp ~/.ssh/test_key.pub /tmp/test_key.pub
          cp ~/.ssh/test_key /tmp/test_key
          chmod 600 /tmp/test_key

      - name: Start server container
        run: |
          docker run -d \
            --name test-container \
            --network host \
            -v /tmp:/tmp \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -e PUID=1000 \
            -e PGID=1000 \
            -e USER_NAME=tester \
            -e SUDO_ACCESS=true \
            -e PUBLIC_KEY_FILE=/tmp/test_key.pub \
            linuxserver/openssh-server:latest

      - name: Wait for SSH server to be ready
        run: |
          echo "Waiting for SSH server to start..."
          for i in {1..30}; do
            if docker exec test-container pgrep sshd > /dev/null 2>&1; then
              echo "SSH daemon is running"
              break
            fi
            echo "Attempt $i/30: SSH daemon not ready yet"
            sleep 2
          done

          echo "Waiting for SSH to accept connections..."
          for i in {1..30}; do
            if ssh -i /tmp/test_key -o StrictHostKeyChecking=no -o ConnectTimeout=5 -o BatchMode=yes tester@localhost "echo 'test'" > /dev/null 2>&1; then
              echo "SSH connection successful"
              break
            fi
            echo "Attempt $i/30: SSH connection failed"
            sleep 2
          done

      - name: Setup and test client
        run: |
          ssh -i /tmp/test_key -o StrictHostKeyChecking=no -o ConnectTimeout=5 tester@localhost "echo 'SSH connection successful'"

      - name: Deploy
        run: |
          uv run python infra/deploy.py infra/configs/dev.yaml

      - name: Test endpoint
        run: |
          ssh -i ~/.ssh/test_key -o StrictHostKeyChecking=no tester@localhost "curl -f http://localhost:80/ping"
