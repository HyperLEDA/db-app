{
  "openapi": "3.1.0",
  "info": {
    "title": "HyperLEDA API",
    "version": "0.1.0"
  },
  "paths": {
    "/api/v1/table/data": {
      "post": {
        "summary": "Add new data to the table",
        "description": "Inserts new data to the table.\nDeduplicates rows based on their contents.\nIf two rows were identical this method will only insert the last one.",
        "operationId": "add_data_api_v1_table_data_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddDataRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIOkResponse_AddDataResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/api/v1/source": {
      "post": {
        "summary": "New internal source entry",
        "description": "Creates new source entry in the database for internal communication and unpublished articles.",
        "operationId": "create_source_api_v1_source_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSourceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIOkResponse_CreateSourceResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/api/v1/table": {
      "post": {
        "summary": "Get or create schema for the table.",
        "description": "Creates new schema for the table which can later be used to upload data.\n**Important**: If the table with the specified name already exists, does nothing and returns ID\nof the previously created table without any alterations.",
        "operationId": "create_table_api_v1_table_post",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTableRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIOkResponse_CreateTableResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Retrieve table information",
        "description": "Fetches details about a specific table using the provided table name",
        "operationId": "get_table_api_v1_table_get",
        "parameters": [
          {
            "name": "table_name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Table Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIOkResponse_GetTableResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Patch table schema",
        "description": "Patch the schema of the table, including column UCDs and units.",
        "operationId": "patch_table_api_v1_table_patch",
        "security": [
          {
            "APIKeyHeader": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchTableRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIOkResponse_PatchTableResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/login": {
      "post": {
        "summary": "Login",
        "description": "Authenticates user and returns token",
        "operationId": "login_api_v1_login_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIOkResponse_LoginResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/marking": {
      "post": {
        "summary": "New marking rules for the table",
        "description": "Creates new marking rules to map the columns in the table to catalog parameters. \nFor a given table a marking would consist of the mapping between catalog parameters \nand the columns from the original table.\n\nFor example, if one wants to create a marking for a column `object_name` that designates the name of an object,\nthey should create a catalog entry similar to the following:\n```json\n{\n    \"name\": \"designation\",\n    \"parameters\": {\n        \"design\": {\n            \"column_name\": \"object_name\"\n        }\n    }\n}\n```\n\nHere, `name` respresents the name of the catalog, keys of `parameters` map are parameter names and `column_name`\nvalues are actual names of the columns under question. **For now, only one column per parameter is supported.**\n\nIt is possible to create several catalog entries for a single object, for example - is there are two columns\nthat represent a name of an object. In that case we might want to upload both names to the database so it is\neasier to cross-identify and search these objects later. Another use case might be if there are several columns\nthat represent photometric information in different filters. In that case one might want to create one entry\nfor each of the magnitude columns.\n\nIn that case you can specify several entries into `rules` list with different values of `key`. For example:\n\n```json\n{\n    \"table_name\": \"my_table\",\n    \"rules\": [\n        {\n            \"name\": \"designation\",\n            \"parameters\": {\n                \"design\": {\n                    \"column_name\": \"object_name\"\n                }\n            },\n            \"key\": \"primary_name\"\n        },\n        {\n            \"name\": \"designation\",\n            \"parameters\": {\n                \"design\": {\n                    \"column_name\": \"secondary_object_name\"\n                }\n            },\n            \"key\": \"secondary_name\"\n        }\n    ]\n}\n```\n\nThe result of this would be two entries into the `designation` catalog for each object in the original table.\n\nThis handler also supports additional parameters that are not present in the original table. For example, a\ntable might not have a separate column for astrometric errors but from other sources you know that its error is\n0.1 degrees for right ascension and 0.5 degrees for declination. You can specify this in the\n`additional_params` field for each catalog:\n\n```json\n{\n    \"name\": \"icrs\",\n    \"parameters\": {\n        \"ra\": {\n            \"column_name\": \"RAJ2000\"\n        },\n        \"dec\": {\n            \"column_name\": \"DEJ2000\"\n        }\n    },\n    \"additional_params\": {\n        \"e_ra\": 0.1,\n        \"e_dec\": 0.5\n    }\n}\n```",
        "operationId": "create_marking_api_v1_marking_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMarkingRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIOkResponse_CreateMarkingResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "APIKeyHeader": []
          }
        ]
      }
    },
    "/api/v1/records/crossmatch": {
      "get": {
        "summary": "Get crossmatch records",
        "description": "Retrieves crossmatch records for a specific table with optional filtering.",
        "operationId": "get_crossmatch_records_api_v1_records_crossmatch_get",
        "parameters": [
          {
            "name": "table_name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Table Name"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/RecordCrossmatchStatus"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status"
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "title": "Page"
            }
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 25,
              "title": "Page Size"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIOkResponse_GetRecordsCrossmatchResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/record/crossmatch": {
      "get": {
        "summary": "Get record crossmatch details",
        "description": "Retrieves detailed crossmatch information for a specific record.",
        "operationId": "get_record_crossmatch_api_v1_record_crossmatch_get",
        "parameters": [
          {
            "name": "record_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Record Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIOkResponse_GetRecordCrossmatchResponse_"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ping": {
      "get": {
        "summary": "Check that service is up and running",
        "operationId": "_lambda__ping_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "APIOkResponse_AddDataResponse_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AddDataResponse"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "APIOkResponse[AddDataResponse]"
      },
      "APIOkResponse_CreateMarkingResponse_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CreateMarkingResponse"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "APIOkResponse[CreateMarkingResponse]"
      },
      "APIOkResponse_CreateSourceResponse_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CreateSourceResponse"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "APIOkResponse[CreateSourceResponse]"
      },
      "APIOkResponse_CreateTableResponse_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CreateTableResponse"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "APIOkResponse[CreateTableResponse]"
      },
      "APIOkResponse_GetRecordCrossmatchResponse_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/GetRecordCrossmatchResponse"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "APIOkResponse[GetRecordCrossmatchResponse]"
      },
      "APIOkResponse_GetRecordsCrossmatchResponse_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/GetRecordsCrossmatchResponse"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "APIOkResponse[GetRecordsCrossmatchResponse]"
      },
      "APIOkResponse_GetTableResponse_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/GetTableResponse"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "APIOkResponse[GetTableResponse]"
      },
      "APIOkResponse_LoginResponse_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/LoginResponse"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "APIOkResponse[LoginResponse]"
      },
      "APIOkResponse_PatchTableResponse_": {
        "properties": {
          "data": {
            "$ref": "#/components/schemas/PatchTableResponse"
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "APIOkResponse[PatchTableResponse]"
      },
      "AddDataRequest": {
        "properties": {
          "table_id": {
            "type": "integer",
            "title": "Table Id"
          },
          "data": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Data",
            "description": "Actual data to append. \nKeys in this dictionary must be a subset of the columns in the table. If not specified, column will be set to NULL.\nNaN and NULL are considered to be the same thing.",
            "examples": [
              [
                {
                  "dec": 41.269,
                  "name": "M 31",
                  "ra": 0.7123
                },
                {
                  "dec": 30.6602,
                  "name": "M 33",
                  "ra": 1.5641
                }
              ]
            ]
          }
        },
        "type": "object",
        "required": [
          "table_id",
          "data"
        ],
        "title": "AddDataRequest"
      },
      "AddDataResponse": {
        "properties": {},
        "type": "object",
        "title": "AddDataResponse"
      },
      "Bibliography": {
        "properties": {
          "title": {
            "type": "string",
            "title": "Title"
          },
          "authors": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Authors"
          },
          "year": {
            "type": "integer",
            "title": "Year"
          },
          "bibcode": {
            "type": "string",
            "title": "Bibcode"
          }
        },
        "type": "object",
        "required": [
          "title",
          "authors",
          "year",
          "bibcode"
        ],
        "title": "Bibliography"
      },
      "CatalogToMark": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "parameters": {
            "additionalProperties": {
              "$ref": "#/components/schemas/ParameterToMark"
            },
            "type": "object",
            "title": "Parameters",
            "description": "Map of parameter names to their configurations",
            "examples": [
              {
                "dec": {
                  "column_name": "dec"
                },
                "ra": {
                  "column_name": "ra"
                }
              }
            ]
          },
          "key": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Key",
            "examples": [
              ""
            ]
          },
          "additional_params": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Additional Params",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "name",
          "parameters"
        ],
        "title": "CatalogToMark"
      },
      "Catalogs": {
        "properties": {
          "designation": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Designation"
              },
              {
                "type": "null"
              }
            ]
          },
          "coordinates": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Coordinates"
              },
              {
                "type": "null"
              }
            ]
          },
          "redshift": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Redshift"
              },
              {
                "type": "null"
              }
            ]
          },
          "velocity": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Velocity"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "title": "Catalogs"
      },
      "ColumnDescription": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "data_type": {
            "$ref": "#/components/schemas/DatatypeEnum"
          },
          "ucd": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ucd"
          },
          "unit": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Unit"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          }
        },
        "type": "object",
        "required": [
          "name",
          "data_type"
        ],
        "title": "ColumnDescription"
      },
      "Coordinates": {
        "properties": {
          "equatorial": {
            "$ref": "#/components/schemas/EquatorialCoordinates"
          },
          "galactic": {
            "$ref": "#/components/schemas/GalacticCoordinates"
          }
        },
        "type": "object",
        "required": [
          "equatorial",
          "galactic"
        ],
        "title": "Coordinates"
      },
      "CreateMarkingRequest": {
        "properties": {
          "table_name": {
            "type": "string",
            "title": "Table Name"
          },
          "catalogs": {
            "items": {
              "$ref": "#/components/schemas/CatalogToMark"
            },
            "type": "array",
            "title": "Catalogs"
          }
        },
        "type": "object",
        "required": [
          "table_name",
          "catalogs"
        ],
        "title": "CreateMarkingRequest"
      },
      "CreateMarkingResponse": {
        "properties": {},
        "type": "object",
        "title": "CreateMarkingResponse"
      },
      "CreateSourceRequest": {
        "properties": {
          "title": {
            "type": "string",
            "title": "Title"
          },
          "authors": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Authors",
            "examples": [
              [
                "Ivanov V.",
                "Johnson H."
              ]
            ]
          },
          "year": {
            "type": "integer",
            "title": "Year",
            "examples": [
              2006
            ]
          }
        },
        "type": "object",
        "required": [
          "title",
          "authors",
          "year"
        ],
        "title": "CreateSourceRequest"
      },
      "CreateSourceResponse": {
        "properties": {
          "code": {
            "type": "string",
            "title": "Code"
          }
        },
        "type": "object",
        "required": [
          "code"
        ],
        "title": "CreateSourceResponse"
      },
      "CreateTableRequest": {
        "properties": {
          "table_name": {
            "type": "string",
            "title": "Table Name"
          },
          "columns": {
            "items": {
              "$ref": "#/components/schemas/ColumnDescription"
            },
            "type": "array",
            "title": "Columns",
            "description": "List of columns in the table",
            "examples": [
              [
                {
                  "data_type": "str",
                  "name": "name",
                  "ucd": "meta.id"
                },
                {
                  "data_type": "float",
                  "name": "ra",
                  "ucd": "pos.eq.ra",
                  "unit": "hourangle"
                },
                {
                  "data_type": "float",
                  "name": "dec",
                  "ucd": "pos.eq.dec",
                  "unit": "deg"
                }
              ]
            ]
          },
          "bibcode": {
            "type": "string",
            "title": "Bibcode",
            "description": "ADS bibcode of the article that published the data (or code of the internal communication)",
            "examples": [
              "2024PDU....4601628D"
            ]
          },
          "datatype": {
            "$ref": "#/components/schemas/DataType"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Human-readable description of the table"
          }
        },
        "type": "object",
        "required": [
          "table_name",
          "columns",
          "bibcode",
          "datatype",
          "description"
        ],
        "title": "CreateTableRequest"
      },
      "CreateTableResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          }
        },
        "type": "object",
        "required": [
          "id"
        ],
        "title": "CreateTableResponse"
      },
      "DataType": {
        "type": "string",
        "enum": [
          "regular",
          "reprocessing",
          "preliminary",
          "compilation"
        ],
        "title": "DataType"
      },
      "DatatypeEnum": {
        "type": "string",
        "enum": [
          "str",
          "string",
          "character varying",
          "text",
          "character",
          "char",
          "short",
          "int",
          "long",
          "integer",
          "smallint",
          "float",
          "double",
          "double precision",
          "real",
          "timestamp without time zone",
          "unsignedLong",
          "unsignedInt",
          "unsignedShort",
          "unsignedByte",
          "positiveInteger",
          "number"
        ],
        "title": "DatatypeEnum"
      },
      "Designation": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "Designation"
      },
      "EquatorialCoordinates": {
        "properties": {
          "ra": {
            "type": "number",
            "title": "Ra"
          },
          "dec": {
            "type": "number",
            "title": "Dec"
          },
          "e_ra": {
            "type": "number",
            "title": "E Ra"
          },
          "e_dec": {
            "type": "number",
            "title": "E Dec"
          }
        },
        "type": "object",
        "required": [
          "ra",
          "dec",
          "e_ra",
          "e_dec"
        ],
        "title": "EquatorialCoordinates"
      },
      "GalacticCoordinates": {
        "properties": {
          "lon": {
            "type": "number",
            "title": "Lon"
          },
          "lat": {
            "type": "number",
            "title": "Lat"
          },
          "e_lon": {
            "type": "number",
            "title": "E Lon"
          },
          "e_lat": {
            "type": "number",
            "title": "E Lat"
          }
        },
        "type": "object",
        "required": [
          "lon",
          "lat",
          "e_lon",
          "e_lat"
        ],
        "title": "GalacticCoordinates"
      },
      "GetRecordCrossmatchResponse": {
        "properties": {
          "crossmatch": {
            "$ref": "#/components/schemas/RecordCrossmatch"
          },
          "candidates": {
            "items": {
              "$ref": "#/components/schemas/PGCCandidate"
            },
            "type": "array",
            "title": "Candidates"
          },
          "schema": {
            "$ref": "#/components/schemas/Schema"
          }
        },
        "type": "object",
        "required": [
          "crossmatch",
          "candidates",
          "schema"
        ],
        "title": "GetRecordCrossmatchResponse"
      },
      "GetRecordsCrossmatchResponse": {
        "properties": {
          "records": {
            "items": {
              "$ref": "#/components/schemas/RecordCrossmatch"
            },
            "type": "array",
            "title": "Records"
          },
          "schema": {
            "$ref": "#/components/schemas/Schema"
          }
        },
        "type": "object",
        "required": [
          "records",
          "schema"
        ],
        "title": "GetRecordsCrossmatchResponse"
      },
      "GetTableResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "column_info": {
            "items": {
              "$ref": "#/components/schemas/ColumnDescription"
            },
            "type": "array",
            "title": "Column Info"
          },
          "rows_num": {
            "type": "integer",
            "title": "Rows Num"
          },
          "meta": {
            "additionalProperties": true,
            "type": "object",
            "title": "Meta"
          },
          "bibliography": {
            "$ref": "#/components/schemas/Bibliography"
          },
          "marking_rules": {
            "items": {
              "$ref": "#/components/schemas/MarkingRule"
            },
            "type": "array",
            "title": "Marking Rules"
          },
          "statistics": {
            "anyOf": [
              {
                "additionalProperties": {
                  "type": "integer"
                },
                "propertyNames": {
                  "$ref": "#/components/schemas/RecordCrossmatchStatus"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Statistics"
          }
        },
        "type": "object",
        "required": [
          "id",
          "description",
          "column_info",
          "rows_num",
          "meta",
          "bibliography",
          "marking_rules"
        ],
        "title": "GetTableResponse"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "HeliocentricVelocity": {
        "properties": {
          "v": {
            "type": "number",
            "title": "V"
          },
          "e_v": {
            "type": "number",
            "title": "E V"
          }
        },
        "type": "object",
        "required": [
          "v",
          "e_v"
        ],
        "title": "HeliocentricVelocity"
      },
      "LoginRequest": {
        "properties": {
          "username": {
            "type": "string",
            "title": "Username"
          },
          "password": {
            "type": "string",
            "title": "Password"
          }
        },
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "title": "LoginRequest"
      },
      "LoginResponse": {
        "properties": {
          "token": {
            "type": "string",
            "title": "Token",
            "description": "Token used to authenticate user in handlers that require a specific role to access"
          }
        },
        "type": "object",
        "required": [
          "token"
        ],
        "title": "LoginResponse"
      },
      "MarkingRule": {
        "properties": {
          "catalog": {
            "type": "string",
            "title": "Catalog"
          },
          "key": {
            "type": "string",
            "title": "Key"
          },
          "columns": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Columns"
          }
        },
        "type": "object",
        "required": [
          "catalog",
          "key",
          "columns"
        ],
        "title": "MarkingRule"
      },
      "PGCCandidate": {
        "properties": {
          "pgc": {
            "type": "integer",
            "title": "Pgc"
          },
          "catalogs": {
            "$ref": "#/components/schemas/Catalogs"
          }
        },
        "type": "object",
        "required": [
          "pgc",
          "catalogs"
        ],
        "title": "PGCCandidate"
      },
      "ParameterToMark": {
        "properties": {
          "column_name": {
            "type": "string",
            "title": "Column Name",
            "description": "Column that this parameter will be mapped to.",
            "examples": [
              "ra"
            ]
          }
        },
        "type": "object",
        "required": [
          "column_name"
        ],
        "title": "ParameterToMark"
      },
      "PatchTableActionTypeChangeUCD": {
        "properties": {
          "column": {
            "type": "string",
            "title": "Column"
          },
          "ucd": {
            "type": "string",
            "title": "Ucd"
          }
        },
        "type": "object",
        "required": [
          "column",
          "ucd"
        ],
        "title": "PatchTableActionTypeChangeUCD"
      },
      "PatchTableActionTypeChangeUnit": {
        "properties": {
          "column": {
            "type": "string",
            "title": "Column"
          },
          "unit": {
            "type": "string",
            "title": "Unit"
          }
        },
        "type": "object",
        "required": [
          "column",
          "unit"
        ],
        "title": "PatchTableActionTypeChangeUnit"
      },
      "PatchTableRequest": {
        "properties": {
          "table_name": {
            "type": "string",
            "title": "Table Name"
          },
          "actions": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/PatchTableActionTypeChangeUCD"
                },
                {
                  "$ref": "#/components/schemas/PatchTableActionTypeChangeUnit"
                }
              ]
            },
            "type": "array",
            "title": "Actions"
          }
        },
        "type": "object",
        "required": [
          "table_name",
          "actions"
        ],
        "title": "PatchTableRequest"
      },
      "PatchTableResponse": {
        "properties": {},
        "type": "object",
        "title": "PatchTableResponse"
      },
      "RecordCrossmatch": {
        "properties": {
          "record_id": {
            "type": "string",
            "title": "Record Id"
          },
          "status": {
            "$ref": "#/components/schemas/RecordCrossmatchStatus"
          },
          "metadata": {
            "$ref": "#/components/schemas/RecordCrossmatchMetadata"
          },
          "catalogs": {
            "$ref": "#/components/schemas/Catalogs"
          }
        },
        "type": "object",
        "required": [
          "record_id",
          "status",
          "metadata",
          "catalogs"
        ],
        "title": "RecordCrossmatch"
      },
      "RecordCrossmatchMetadata": {
        "properties": {
          "possible_matches": {
            "anyOf": [
              {
                "items": {
                  "type": "integer"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Possible Matches"
          },
          "pgc": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Pgc"
          }
        },
        "type": "object",
        "title": "RecordCrossmatchMetadata"
      },
      "RecordCrossmatchStatus": {
        "type": "string",
        "enum": [
          "unprocessed",
          "new",
          "collided",
          "existing"
        ],
        "title": "RecordCrossmatchStatus"
      },
      "Redshift": {
        "properties": {
          "z": {
            "type": "number",
            "title": "Z"
          },
          "e_z": {
            "type": "number",
            "title": "E Z"
          }
        },
        "type": "object",
        "required": [
          "z",
          "e_z"
        ],
        "title": "Redshift"
      },
      "Schema": {
        "properties": {
          "units": {
            "$ref": "#/components/schemas/UnitsSchema"
          }
        },
        "type": "object",
        "required": [
          "units"
        ],
        "title": "Schema"
      },
      "UnitsSchema": {
        "properties": {
          "coordinates": {
            "additionalProperties": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            "type": "object",
            "title": "Coordinates"
          },
          "velocity": {
            "additionalProperties": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            "type": "object",
            "title": "Velocity"
          }
        },
        "type": "object",
        "required": [
          "coordinates",
          "velocity"
        ],
        "title": "UnitsSchema"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "Velocity": {
        "properties": {
          "heliocentric": {
            "$ref": "#/components/schemas/HeliocentricVelocity"
          }
        },
        "type": "object",
        "required": [
          "heliocentric"
        ],
        "title": "Velocity"
      }
    },
    "securitySchemes": {
      "APIKeyHeader": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization"
      }
    }
  }
}