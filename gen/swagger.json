{
  "paths": {
    "/api/v1/admin/table/data": {
      "post": {
        "summary": "Add new raw data to the table",
        "description": "Inserts new data to the table.\n\nDeduplicates rows based on their contents.\nIf two rows were identical this method will only insert the last one.\n",
        "security": [
          {
            "TokenAuth": []
          }
        ],
        "tags": [
          "table"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddDataRequestSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Source was successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/AddDataResponseSchema"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/source": {
      "post": {
        "summary": "New source entry",
        "description": "Creates new source entry in the database for internal communication and unpublished articles.",
        "security": [
          {
            "TokenAuth": []
          }
        ],
        "tags": [
          "source"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSourceRequestSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Source was successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/CreateSourceResponseSchema"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/table": {
      "post": {
        "summary": "Get or create schema for the table.",
        "description": "Creates new schema for the table which can later be used to upload data.\n\n**Important**: If the table with the specified name already exists, does nothing and returns ID\nof the previously created table without any alterations.\n",
        "tags": [
          "table"
        ],
        "security": [
          {
            "TokenAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTableRequestSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Table was successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/CreateTableResponseSchema"
                    }
                  }
                }
              }
            }
          },
          "201": {
            "description": "Table with this name already existed, its ID is returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/CreateTableResponseSchema"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Patch table schema",
        "description": "Patch the schema of the table, including column UCDs and units.\n",
        "tags": [
          "table"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchTableRequestSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Table was successfully patched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/PatchTableResponseSchema"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/table/validation": {
      "get": {
        "summary": "Validate table schema",
        "description": "Validates the schema of the table, including column units and UCDs.\n\nReturns code 200 even if there are validation errors.\n",
        "tags": [
          "table"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "table_id",
            "description": "ID of the table",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Table was successfully validated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/GetTableValidationResponseSchema"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/admin/task": {
      "get": {
        "summary": "Get information about the task",
        "description": "Retrieves information about the task using its id.",
        "security": [
          {
            "TokenAuth": []
          }
        ],
        "tags": [
          "tasks"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "task_id",
            "description": "ID of the task",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Task was successfully obtained",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/GetTaskInfoResponseSchema"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/login": {
      "post": {
        "summary": "Login user with username and password",
        "description": "Gives user credentials for authentication in handlers",
        "tags": [
          "authentication"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequestSchema"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User was successfully logged in",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/LoginResponseSchema"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/table/status/stats": {
      "get": {
        "summary": "Get statistics on table processing",
        "description": "Accesses the current status of the processing of a given table.\nReturns the distribution of objects by processing status.\n\nIf there are no objects with the given status, it will not be present in the response.\n",
        "security": [
          {
            "TokenAuth": []
          }
        ],
        "tags": [
          "table"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "table_id",
            "description": "Identifier of the table",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Number of objects in each status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/TableStatusStatsResponseSchema"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "info": {
    "title": "HyperLeda API specification",
    "version": "1.0.0"
  },
  "openapi": "3.0.2",
  "components": {
    "schemas": {
      "AddDataRequestSchema": {
        "type": "object",
        "properties": {
          "table_id": {
            "type": "integer",
            "description": "ID of the table to add data to"
          },
          "data": {
            "type": "array",
            "description": "\n            Actual data to append. \n            Keys in this dictionary must be a subset of the columns in the table. \n            If not specified, column will be set to NULL.\n        ",
            "example": [
              {
                "name": "M 33",
                "ra": 1.5641,
                "dec": 30.6602
              },
              {
                "name": "M 31",
                "ra": 0.7123,
                "dec": 41.269
              }
            ],
            "items": {
              "type": "object",
              "additionalProperties": {}
            }
          }
        },
        "required": [
          "data",
          "table_id"
        ]
      },
      "AddDataResponseSchema": {
        "type": "object",
        "properties": {}
      },
      "CreateSourceRequestSchema": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of publication"
          },
          "authors": {
            "type": "array",
            "description": "List of authors",
            "items": {
              "type": "string"
            }
          },
          "year": {
            "type": "integer",
            "minimum": 1500,
            "description": "Year of the publication",
            "example": 2006
          }
        },
        "required": [
          "authors",
          "title",
          "year"
        ]
      },
      "CreateSourceResponseSchema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code for the source"
          }
        },
        "required": [
          "code"
        ]
      },
      "ColumnDescription": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the column. Should not equal `hyperleda_internal_id`."
          },
          "data_type": {
            "type": "string",
            "enum": [
              "str",
              "string",
              "character varying",
              "text",
              "character",
              "char",
              "short",
              "int",
              "integer",
              "smallint",
              "float",
              "double",
              "double precision",
              "real",
              "timestamp without time zone"
            ],
            "description": "Type of data"
          },
          "unit": {
            "type": "string",
            "description": "Unit of the data",
            "example": "m/s",
            "nullable": true
          },
          "ucd": {
            "type": "string",
            "description": "Unified Content Descriptor for the column (UCD1+)",
            "example": "pos.eq.ra",
            "nullable": true
          },
          "description": {
            "type": "string",
            "default": "",
            "description": "Human-readable description of the column",
            "nullable": true
          }
        },
        "required": [
          "data_type",
          "name"
        ]
      },
      "CreateTableRequestSchema": {
        "type": "object",
        "properties": {
          "table_name": {
            "type": "string",
            "description": "Name of the table"
          },
          "columns": {
            "type": "array",
            "description": "List of columns in the table",
            "example": [
              {
                "name": "name",
                "data_type": "str",
                "ucd": "meta.id"
              },
              {
                "name": "ra",
                "data_type": "float",
                "unit": "hourangle",
                "ucd": "pos.eq.ra"
              },
              {
                "name": "dec",
                "data_type": "float",
                "unit": "deg",
                "ucd": "pos.eq.dec"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/ColumnDescription"
            }
          },
          "bibcode": {
            "type": "string",
            "description": "ADS bibcode of the article that published the data (or code of the internal communication)",
            "example": "2024PDU....4601628D"
          },
          "datatype": {
            "type": "string",
            "default": "regular",
            "enum": [
              "regular",
              "reprocessing",
              "preliminary",
              "compilation",
              null
            ],
            "description": "Type of the data in the table",
            "nullable": true
          },
          "description": {
            "type": "string",
            "default": "",
            "description": "Human-readable description of the table",
            "nullable": true
          }
        },
        "required": [
          "bibcode",
          "columns",
          "table_name"
        ]
      },
      "CreateTableResponseSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Output id of the table"
          }
        },
        "required": [
          "id"
        ]
      },
      "GetTableValidationRequestSchema": {
        "type": "object",
        "properties": {
          "table_id": {
            "type": "integer",
            "description": "ID of the table"
          }
        },
        "required": [
          "table_id"
        ]
      },
      "TableValidation": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message"
          },
          "validator": {
            "type": "string",
            "description": "Type of the rule that was not satisfied"
          }
        }
      },
      "GetTableValidationResponseSchema": {
        "type": "object",
        "properties": {
          "validations": {
            "type": "array",
            "description": "List of validation errors",
            "items": {
              "$ref": "#/components/schemas/TableValidation"
            }
          }
        }
      },
      "PatchTableAction": {
        "type": "object",
        "properties": {}
      },
      "PatchTableRequestSchema": {
        "type": "object",
        "properties": {
          "table_id": {
            "type": "integer",
            "description": "ID of the table"
          },
          "actions": {
            "type": "array",
            "description": "List of actions to perform",
            "items": {
              "$ref": "#/components/schemas/PatchTableAction"
            }
          }
        },
        "required": [
          "actions",
          "table_id"
        ]
      },
      "PatchTableResponseSchema": {
        "type": "object",
        "properties": {}
      },
      "GetTaskInfoRequestSchema": {
        "type": "object",
        "properties": {
          "task_id": {
            "type": "integer",
            "description": "ID of the task"
          }
        },
        "required": [
          "task_id"
        ]
      },
      "GetTaskInfoResponseSchema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of the task"
          },
          "task_name": {
            "type": "string",
            "description": "Name of the task from task registry"
          },
          "status": {
            "type": "string",
            "description": "Task status"
          },
          "payload": {
            "type": "object",
            "description": "Payload to the task",
            "additionalProperties": {}
          },
          "start_time": {
            "type": "string",
            "format": "date-time",
            "description": "Time when task started"
          },
          "end_time": {
            "type": "string",
            "format": "date-time",
            "description": "Time when task ended"
          },
          "message": {
            "type": "object",
            "description": "Message associated with the task status",
            "additionalProperties": {}
          }
        }
      },
      "LoginRequestSchema": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "Username"
          },
          "password": {
            "type": "string",
            "description": "Password"
          }
        },
        "required": [
          "password",
          "username"
        ]
      },
      "LoginResponseSchema": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Token used to authenticate user in handlers that require a specific role to access"
          }
        }
      },
      "TableStatusStatsRequestSchema": {
        "type": "object",
        "properties": {
          "table_id": {
            "type": "integer",
            "description": "Identifier of the table"
          }
        },
        "required": [
          "table_id"
        ]
      },
      "TableStatusStatsResponseSchema": {
        "type": "object",
        "properties": {
          "processing": {
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "TokenAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}